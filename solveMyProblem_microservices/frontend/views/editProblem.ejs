<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Problem</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            font-family: 'Arial', sans-serif;
            background: #f4f4f8;
        }
        body {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }
        .header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: black;
            color: white;
            padding: 10px 20px;
            width: 100%;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            z-index: 1000;
        }
        .container {
            width: 80%;
            max-width: 600px;
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 70px auto 20px;
            background-color: #ffffff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .footer {
            width: 100%;
            background-color: #dedede;
            padding: 10px 20px;
            text-align: center;
        }
        .form-container {
            width: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
        }
        .form-group {
            width: 100%;
            margin-bottom: 15px;
        }
        input.form-control {
            height: 40px;
            padding: 5px 10px;
            border: 1px solid #ced4da;
            border-radius: 5px;
        }
        .btn-center {
            width: 100%;
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }
        .btn-primary {
            padding: 10px 30px;
            color: white;
            background-color: #007bff;
            border-color: #007bff;
            border-radius: 5px;
            font-size: 16px;
        }
    </style>
</head>
<body>
<div class="header">
    <h1 style="margin: 0;">SolveMyProblem</h1>
    <div id="date-time"></div>
</div>

<div class="container">
    <h2>Edit Problem</h2>

    <div id="problem-details" class="form-container">
        <!-- Problem details will be inserted here -->
    </div>

    <div class="btn-center">
        <button id="save-button" class="btn btn-primary">Save Changes</button>
    </div>
</div>

<div class="footer">
    <p>Â© 2024 SolveMyProblem. All rights reserved.</p>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script>
    const token = '<%= token %>';
    function updateTime() {
        document.getElementById('date-time').textContent = new Date().toLocaleString();
    }
    setInterval(updateTime, 1000);

    document.addEventListener("DOMContentLoaded", function() {
        const problemId = new URLSearchParams(window.location.search).get('problemId');
        console.log('Fetching problem details for problemId:', problemId);

        fetch('/infoProblem', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ problemId: problemId })
        })
            .then(response => response.json())
            .then(data => {
                const problemDetailsDiv = document.getElementById('problem-details');

                const problemNameInput = document.createElement('input');
                problemNameInput.type = 'text';
                problemNameInput.value = data.problemName;
                problemNameInput.className = 'form-control';
                problemNameInput.id = 'problem-name';
                problemNameInput.required = true;

                const nameFormGroup = document.createElement('div');
                nameFormGroup.className = 'form-group';
                const nameLabel = document.createElement('label');
                nameLabel.textContent = 'Problem Name';
                nameFormGroup.appendChild(nameLabel);
                nameFormGroup.appendChild(problemNameInput);
                problemDetailsDiv.appendChild(nameFormGroup);

                data.values.forEach(value => {
                    const formGroup = document.createElement('div');
                    formGroup.className = 'form-group';

                    const label = document.createElement('label');
                    label.textContent = value.parameterName;
                    formGroup.appendChild(label);

                    const input = document.createElement('input');
                    input.type = value.parameterType;
                    if (input.type === 'file') {
                        input.value = '';
                        input.accept = '.json';
                    } else {
                        input.value = value.value;
                    }
                    input.className = 'form-control problem-value';
                    input.dataset.entryId = value.entryId;
                    formGroup.appendChild(input);

                    problemDetailsDiv.appendChild(formGroup);
                });
            })
            .catch(error => {
                console.error('Error fetching problem details:', error);
            });
    });

    document.getElementById('save-button').addEventListener('click', async function() {
        const problemId = new URLSearchParams(window.location.search).get('problemId');
        const problemName = document.getElementById('problem-name').value;
        let values = await Promise.all(Array.from(document.querySelectorAll('.problem-value')).map(async input => {
            if (input.type === 'file' && input.files.length > 0) {
                const file = input.files[0];
                const fileContent = await readFileAsText(file);
                return {
                    entryId: input.dataset.entryId,
                    value: fileContent
                };
            } else if (input.value.trim() !== '') {
                return {
                    entryId: input.dataset.entryId,
                    value: input.value
                };
            } else {
                return null;
            }
        }
        ));

        values = values.filter(value => value !== null);
        fetch('/updateProblem', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ problemId, problemName, values })
        })
            .then(response => {
                if (!response.ok) throw new Error('Failed to update the problem');
                console.log('Problem updated successfully');
                window.location.href = '/home';
            })
            .catch(error => {
                console.error('Error updating problem:', error);
            });
    });

    function readFileAsText(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsText(file);
        });
    }
</script>
</body>
</html>
